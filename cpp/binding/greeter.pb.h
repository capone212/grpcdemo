// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greeter.proto

#ifndef PROTOBUF_greeter_2eproto__INCLUDED
#define PROTOBUF_greeter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_greeter_2eproto();
void protobuf_AssignDesc_greeter_2eproto();
void protobuf_ShutdownFile_greeter_2eproto();

class HelloRequest;
class HelloReply;
class RequesArg;
class PacketHeader;
class MediaPacket;

enum PacketHeader_MediType {
  PacketHeader_MediType_VIDEO = 0,
  PacketHeader_MediType_AUDIO = 1,
  PacketHeader_MediType_METADATA = 2,
  PacketHeader_MediType_PacketHeader_MediType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PacketHeader_MediType_PacketHeader_MediType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PacketHeader_MediType_IsValid(int value);
const PacketHeader_MediType PacketHeader_MediType_MediType_MIN = PacketHeader_MediType_VIDEO;
const PacketHeader_MediType PacketHeader_MediType_MediType_MAX = PacketHeader_MediType_METADATA;
const int PacketHeader_MediType_MediType_ARRAYSIZE = PacketHeader_MediType_MediType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketHeader_MediType_descriptor();
inline const ::std::string& PacketHeader_MediType_Name(PacketHeader_MediType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketHeader_MediType_descriptor(), value);
}
inline bool PacketHeader_MediType_Parse(
    const ::std::string& name, PacketHeader_MediType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketHeader_MediType>(
    PacketHeader_MediType_descriptor(), name, value);
}
// ===================================================================

class HelloRequest : public ::google::protobuf::Message {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  void Swap(HelloRequest* other);

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const { return New(NULL); }

  HelloRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:helloworld.HelloRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_greeter_2eproto();
  friend void protobuf_AssignDesc_greeter_2eproto();
  friend void protobuf_ShutdownFile_greeter_2eproto();

  void InitAsDefaultInstance();
  static HelloRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelloReply : public ::google::protobuf::Message {
 public:
  HelloReply();
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply& default_instance();

  void Swap(HelloReply* other);

  // implements Message ----------------------------------------------

  inline HelloReply* New() const { return New(NULL); }

  HelloReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HelloReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:helloworld.HelloReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_greeter_2eproto();
  friend void protobuf_AssignDesc_greeter_2eproto();
  friend void protobuf_ShutdownFile_greeter_2eproto();

  void InitAsDefaultInstance();
  static HelloReply* default_instance_;
};
// -------------------------------------------------------------------

class RequesArg : public ::google::protobuf::Message {
 public:
  RequesArg();
  virtual ~RequesArg();

  RequesArg(const RequesArg& from);

  inline RequesArg& operator=(const RequesArg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequesArg& default_instance();

  void Swap(RequesArg* other);

  // implements Message ----------------------------------------------

  inline RequesArg* New() const { return New(NULL); }

  RequesArg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequesArg& from);
  void MergeFrom(const RequesArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequesArg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:helloworld.RequesArg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_greeter_2eproto();
  friend void protobuf_AssignDesc_greeter_2eproto();
  friend void protobuf_ShutdownFile_greeter_2eproto();

  void InitAsDefaultInstance();
  static RequesArg* default_instance_;
};
// -------------------------------------------------------------------

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();

  void Swap(PacketHeader* other);

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const { return New(NULL); }

  PacketHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PacketHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PacketHeader_MediType MediType;
  static const MediType VIDEO = PacketHeader_MediType_VIDEO;
  static const MediType AUDIO = PacketHeader_MediType_AUDIO;
  static const MediType METADATA = PacketHeader_MediType_METADATA;
  static inline bool MediType_IsValid(int value) {
    return PacketHeader_MediType_IsValid(value);
  }
  static const MediType MediType_MIN =
    PacketHeader_MediType_MediType_MIN;
  static const MediType MediType_MAX =
    PacketHeader_MediType_MediType_MAX;
  static const int MediType_ARRAYSIZE =
    PacketHeader_MediType_MediType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MediType_descriptor() {
    return PacketHeader_MediType_descriptor();
  }
  static inline const ::std::string& MediType_Name(MediType value) {
    return PacketHeader_MediType_Name(value);
  }
  static inline bool MediType_Parse(const ::std::string& name,
      MediType* value) {
    return PacketHeader_MediType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .helloworld.PacketHeader.MediType mediaType = 1;
  void clear_mediatype();
  static const int kMediaTypeFieldNumber = 1;
  ::helloworld::PacketHeader_MediType mediatype() const;
  void set_mediatype(::helloworld::PacketHeader_MediType value);

  // optional string encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  const ::std::string& encoding() const;
  void set_encoding(const ::std::string& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  ::std::string* mutable_encoding();
  ::std::string* release_encoding();
  void set_allocated_encoding(::std::string* encoding);

  // @@protoc_insertion_point(class_scope:helloworld.PacketHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr encoding_;
  int mediatype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_greeter_2eproto();
  friend void protobuf_AssignDesc_greeter_2eproto();
  friend void protobuf_ShutdownFile_greeter_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// -------------------------------------------------------------------

class MediaPacket : public ::google::protobuf::Message {
 public:
  MediaPacket();
  virtual ~MediaPacket();

  MediaPacket(const MediaPacket& from);

  inline MediaPacket& operator=(const MediaPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaPacket& default_instance();

  void Swap(MediaPacket* other);

  // implements Message ----------------------------------------------

  inline MediaPacket* New() const { return New(NULL); }

  MediaPacket* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaPacket& from);
  void MergeFrom(const MediaPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .helloworld.PacketHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::helloworld::PacketHeader& header() const;
  ::helloworld::PacketHeader* mutable_header();
  ::helloworld::PacketHeader* release_header();
  void set_allocated_header(::helloworld::PacketHeader* header);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:helloworld.MediaPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::helloworld::PacketHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_greeter_2eproto();
  friend void protobuf_AssignDesc_greeter_2eproto();
  friend void protobuf_ShutdownFile_greeter_2eproto();

  void InitAsDefaultInstance();
  static MediaPacket* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HelloRequest

// optional string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.HelloRequest.name)
}
inline ::std::string* HelloRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.HelloRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// optional string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:helloworld.HelloReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.HelloReply.message)
}
inline void HelloReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.HelloReply.message)
}
inline void HelloReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.HelloReply.message)
}
inline ::std::string* HelloReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.HelloReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReply::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:helloworld.HelloReply.message)
}

// -------------------------------------------------------------------

// RequesArg

// optional uint32 count = 1;
inline void RequesArg::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 RequesArg::count() const {
  // @@protoc_insertion_point(field_get:helloworld.RequesArg.count)
  return count_;
}
inline void RequesArg::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:helloworld.RequesArg.count)
}

// -------------------------------------------------------------------

// PacketHeader

// optional .helloworld.PacketHeader.MediType mediaType = 1;
inline void PacketHeader::clear_mediatype() {
  mediatype_ = 0;
}
inline ::helloworld::PacketHeader_MediType PacketHeader::mediatype() const {
  // @@protoc_insertion_point(field_get:helloworld.PacketHeader.mediaType)
  return static_cast< ::helloworld::PacketHeader_MediType >(mediatype_);
}
inline void PacketHeader::set_mediatype(::helloworld::PacketHeader_MediType value) {
  
  mediatype_ = value;
  // @@protoc_insertion_point(field_set:helloworld.PacketHeader.mediaType)
}

// optional string encoding = 2;
inline void PacketHeader::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PacketHeader::encoding() const {
  // @@protoc_insertion_point(field_get:helloworld.PacketHeader.encoding)
  return encoding_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketHeader::set_encoding(const ::std::string& value) {
  
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.PacketHeader.encoding)
}
inline void PacketHeader::set_encoding(const char* value) {
  
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.PacketHeader.encoding)
}
inline void PacketHeader::set_encoding(const char* value, size_t size) {
  
  encoding_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.PacketHeader.encoding)
}
inline ::std::string* PacketHeader::mutable_encoding() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.PacketHeader.encoding)
  return encoding_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketHeader::release_encoding() {
  
  return encoding_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketHeader::set_allocated_encoding(::std::string* encoding) {
  if (encoding != NULL) {
    
  } else {
    
  }
  encoding_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:helloworld.PacketHeader.encoding)
}

// -------------------------------------------------------------------

// MediaPacket

// optional .helloworld.PacketHeader header = 1;
inline bool MediaPacket::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void MediaPacket::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::helloworld::PacketHeader& MediaPacket::header() const {
  // @@protoc_insertion_point(field_get:helloworld.MediaPacket.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::helloworld::PacketHeader* MediaPacket::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::helloworld::PacketHeader;
  }
  // @@protoc_insertion_point(field_mutable:helloworld.MediaPacket.header)
  return header_;
}
inline ::helloworld::PacketHeader* MediaPacket::release_header() {
  
  ::helloworld::PacketHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void MediaPacket::set_allocated_header(::helloworld::PacketHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:helloworld.MediaPacket.header)
}

// optional string data = 2;
inline void MediaPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaPacket::data() const {
  // @@protoc_insertion_point(field_get:helloworld.MediaPacket.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:helloworld.MediaPacket.data)
}
inline void MediaPacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:helloworld.MediaPacket.data)
}
inline void MediaPacket::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:helloworld.MediaPacket.data)
}
inline ::std::string* MediaPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:helloworld.MediaPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaPacket::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:helloworld.MediaPacket.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::helloworld::PacketHeader_MediType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::helloworld::PacketHeader_MediType>() {
  return ::helloworld::PacketHeader_MediType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_greeter_2eproto__INCLUDED

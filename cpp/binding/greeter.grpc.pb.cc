// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: greeter.proto

#include "greeter.pb.h"
#include "greeter.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace helloworld {

static const char* Greeter_method_names[] = {
  "/helloworld.Greeter/SayHello",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_SayHello_(Greeter_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(Greeter_method_names[0]))
  {}

::grpc::Status Greeter::Stub::SayHello(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_SayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>* Greeter::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::helloworld::HelloReply>(channel(), cq, rpcmethod_SayHello_, context, request);
}

Greeter::AsyncService::AsyncService() : ::grpc::AsynchronousService(Greeter_method_names, 1) {}

Greeter::Service::~Service() {
  delete service_;
}

::grpc::Status Greeter::Service::SayHello(::grpc::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void Greeter::AsyncService::RequestSayHello(::grpc::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* Greeter::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Greeter::Service, ::helloworld::HelloRequest, ::helloworld::HelloReply>(
          std::mem_fn(&Greeter::Service::SayHello), this),
      new ::helloworld::HelloRequest, new ::helloworld::HelloReply));
  return service_;
}


static const char* SourceEndpoint_method_names[] = {
  "/helloworld.SourceEndpoint/RequestPackets",
};

std::unique_ptr< SourceEndpoint::Stub> SourceEndpoint::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< SourceEndpoint::Stub> stub(new SourceEndpoint::Stub(channel));
  return stub;
}

SourceEndpoint::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_RequestPackets_(SourceEndpoint_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel->RegisterMethod(SourceEndpoint_method_names[0]))
  {}

::grpc::ClientReader< ::helloworld::MediaPacket>* SourceEndpoint::Stub::RequestPacketsRaw(::grpc::ClientContext* context, const ::helloworld::RequesArg& request) {
  return new ::grpc::ClientReader< ::helloworld::MediaPacket>(channel(), rpcmethod_RequestPackets_, context, request);
}

::grpc::ClientAsyncReader< ::helloworld::MediaPacket>* SourceEndpoint::Stub::AsyncRequestPacketsRaw(::grpc::ClientContext* context, const ::helloworld::RequesArg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::helloworld::MediaPacket>(channel(), cq, rpcmethod_RequestPackets_, context, request, tag);
}

SourceEndpoint::AsyncService::AsyncService() : ::grpc::AsynchronousService(SourceEndpoint_method_names, 1) {}

SourceEndpoint::Service::~Service() {
  delete service_;
}

::grpc::Status SourceEndpoint::Service::RequestPackets(::grpc::ServerContext* context, const ::helloworld::RequesArg* request, ::grpc::ServerWriter< ::helloworld::MediaPacket>* writer) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void SourceEndpoint::AsyncService::RequestRequestPackets(::grpc::ServerContext* context, ::helloworld::RequesArg* request, ::grpc::ServerAsyncWriter< ::helloworld::MediaPacket>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* SourceEndpoint::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      SourceEndpoint_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< SourceEndpoint::Service, ::helloworld::RequesArg, ::helloworld::MediaPacket>(
          std::mem_fn(&SourceEndpoint::Service::RequestPackets), this),
      new ::helloworld::RequesArg, new ::helloworld::MediaPacket));
  return service_;
}


}  // namespace helloworld

